import os
from threading import Timer
from flask import Flask, request
from twilio.twiml.messaging_response import MessagingResponse
from twilio.rest import Client
from datetime import datetime

app = Flask(__name__)

# Twilio REST client ‚Äì define estas variables en Replit Secrets
client = Client(
    os.environ['TWILIO_ACCOUNT_SID'],
    os.environ['TWILIO_AUTH_TOKEN']
)

# N√∫meros WhatsApp (Twilio y tienda)
SANDBOX_NUMBER = 'whatsapp:+5215612268107'
STORE_NUMBER   = 'whatsapp:+5215612522186'

# Sesiones en memoria
sessions = {}
pedidos_activos = {}

# Estados de conversaci√≥n
STATE_AWAITING_NAME    = 'awaiting_name'
STATE_ASK_ADDRESS      = 'ask_address'
STATE_MAIN_MENU        = 'main_menu'
STATE_OPTION1_WAIT_OK  = 'option1_wait_ok'
STATE_ASK_COMBO_COUNT  = 'ask_combo_count'
STATE_ASK_COMBO_TYPE   = 'ask_combo_type'
STATE_ASK_PROTEIN      = 'ask_protein'
STATE_ASK_BEVERAGE     = 'ask_beverage'
STATE_ASK_EXTRA        = 'ask_extra'

# Emoji helper
digit_emoji = {
    '0':'0Ô∏è‚É£','1':'1Ô∏è‚É£','2':'2Ô∏è‚É£','3':'3Ô∏è‚É£','4':'4Ô∏è‚É£',
    '5':'5Ô∏è‚É£','6':'6Ô∏è‚É£','7':'7Ô∏è‚É£','8':'8Ô∏è‚É£','9':'9Ô∏è‚É£'
}
def num_emoji(s: str) -> str:
    return ''.join(digit_emoji[d] for d in s)

# Men√∫s
MENU_LINK = "https://drive.google.com/file/d/1Mm8i1YtES9su0tl8XX8UqokQSiWeV3vQ/view?usp=sharing"
COMBO_OPTIONS = {
    '1': ("El Cl√°sico Shing√≥n", 185.00),
    '2': ("El Verde Shing√≥n",   185.00),
    '3': ("El Que No Se Decide",215.00),
}
PROTEIN_OPTIONS = {
    '1': ("Pollito",       0.00),
    '2': ("Carnita Asada", 0.00),
    '3': ("Cecina de Res",45.00),
    '4': ("Sin prote√≠na",  0.00),
}
BEVERAGE_OPTIONS = {
    '1': "Limonada Natural",
    '2': "Jamaica con Lim√≥n",
    '3': "Coca-Cola",
    '4': "Pepsi",
    '5': "Manzanita Sol",
    '6': "Squirt",
    '7': "Mirinda",
    '8': "Seven Up"
}
EXTRA_OPTIONS = {
    '1':  ("Huevito duro",       18.00),
    '2':  ("Huevito estrellado", 18.00),
    '3':  ("Guacamole chingon",  45.00),
    '4':  ("Dirty Horchata",     45.00),
    '5':  ("Limonada Natural",   45.00),
    '6':  ("Jamaica con Lim√≥n",  45.00),
    '7':  ("Coca-Cola",          45.00),
    '8':  ("Pepsi",              45.00),
    '9':  ("Manzanita Sol",      45.00),
    '10': ("Mirinda",            45.00),
    '11': ("Seven Up",           45.00),
    '12': ("Ningun extra",        0.00),
}

@app.route("/", methods=["GET"])
def home():
    return "‚úÖ Chilo Bot is running!"

@app.route("/whatsapp", methods=['POST'])
def whatsapp():
    incoming = request.values.get('Body', '').strip()
    sender   = request.values.get('From')
    resp     = MessagingResponse()
    msg      = resp.message()

    # Recuperar o crear sesi√≥n
    session = sessions.get(sender, {
        'state': None,
        'data': {
            'name':           None,
            'address':        None,
            'combos_total':   0,
            'current_combo':  0,
            'combos':         [],
        }
    })
    state = session['state']

    # 1) Saludo y pedir nombre
    if state is None:
        msg.body(
            "¬°Hola! üëã Gracias por escribir a *Los Shelakeles*.\n"
            "Soy *Chilo* ü§ñüå∂Ô∏è y estoy para ayudarte a generar tu pedido.\n"
            "¬øMe puedes dar tu nombre?"
        )
        session['state'] = STATE_AWAITING_NAME

    # 2) Guardar nombre y pedir direcci√≥n
    elif state == STATE_AWAITING_NAME:
        session['data']['name'] = incoming.title()
        msg.body(f"¬°Excelente, {session['data']['name']}! üöö\n¬øA qu√© direcci√≥n enviamos tu pedido?")
        session['state'] = STATE_ASK_ADDRESS

    # 3) Guardar direcci√≥n y mostrar men√∫ principal
    elif state == STATE_ASK_ADDRESS:
        session['data']['address'] = incoming
        msg.body(
            "¬øCon cu√°l opci√≥n comenzamos? üå∂Ô∏è\n\n"
            "1Ô∏è‚É£ Ver men√∫ ching√≥n  \n"
            "2Ô∏è‚É£ Ya s√© qu√© quiero, armemos el pedido  \n"
            "3Ô∏è‚É£ Promos chingonas de hoy  \n"
            "4Ô∏è‚É£ Hablar con un humano"
        )
        session['state'] = STATE_MAIN_MENU

    # 4) Manejo de men√∫ principal
    elif state == STATE_MAIN_MENU:
        if incoming == '1':
            msg.body(f"Claro que s√≠! Aqu√≠ est√° el men√∫ ching√≥n: üìé {MENU_LINK}")
            Timer(5.0, lambda: client.messages.create(
                from_=SANDBOX_NUMBER,
                to=sender,
                body="Escribe *ok* cuando est√©s listo para armar tu pedido."
            )).start()
            session['state'] = STATE_OPTION1_WAIT_OK

        elif incoming == '2':
            msg.body(
                "Perfecto üòé, ¬øcu√°ntos combos vas a querer hoy?\n"
                "Responde con un n√∫mero (1‚Äì9)."
            )
            session['state'] = STATE_ASK_COMBO_COUNT

        elif incoming == '3':
            msg.body(
                "üî• Promos de hoy:\nüëâ Promo del mes ‚Ä¶\n"
                "¬øEntras al grupo de *Promos Chingonas*?\n"
                "1Ô∏è‚É£ S√≠\n2Ô∏è‚É£ No"
            )
            session['state'] = 'promos_optin'

        elif incoming == '4':
            name = session['data']['name']
            phone = sender.split("whatsapp:")[1]
            msg.body("üëå En un momento te contacta un humano.")
            client.messages.create(
                from_=SANDBOX_NUMBER,
                to=STORE_NUMBER,
                body=f"*{name}* solicita atenci√≥n humana. üìû +{phone}"
            )
            session = None

        else:
            msg.body("Elige 1‚Äì4, porfa.")

    # 5) OK tras ver men√∫
    elif state == STATE_OPTION1_WAIT_OK:
        if incoming.lower() == 'ok':
            msg.body(
                "üßæ ¬°Ching√≥n! ¬øCu√°ntos combos vas a querer hoy?\n"
                "Responde con un n√∫mero (1‚Äì9)."
            )
            session['state'] = STATE_ASK_COMBO_COUNT
        else:
            msg.body("Escribe *ok* cuando est√©s listo.")

    # 6) N√∫mero de combos
    elif state == STATE_ASK_COMBO_COUNT:
        try:
            count = int(incoming)
        except ValueError:
            msg.body("Dime un n√∫mero v√°lido (1‚Äì9).")
            sessions[sender] = session
            return str(resp)

        if count >= 10:
            name = session['data']['name']
            phone = sender.split("whatsapp:")[1]
            client.messages.create(
                from_=SANDBOX_NUMBER,
                to=STORE_NUMBER,
                body=(
                    f"üö® Pedido especial üö®\n"
                    f"Cliente: {name}\n"
                    f"Combos: {count}\n"
                    f"Contacto: +{phone}"
                )
            )
            msg.body("¬°Gracias! Un humano te atender√°.")
            session = None
        else:
            session['data']['combos_total']  = count
            session['data']['current_combo'] = 1
            session['state'] = STATE_ASK_COMBO_TYPE
            msg.body(
                f"Combo 1Ô∏è‚É£:\n" +
                "\n".join(
                    f"{num_emoji(k)} {v[0]} ‚Äî ${v[1]:.2f}"
                    for k, v in COMBO_OPTIONS.items()
                )
            )

    # 7) Elegir combo
    elif state == STATE_ASK_COMBO_TYPE:
        if incoming in COMBO_OPTIONS:
            session['data']['combos'].append({'combo': incoming})
            session['state'] = STATE_ASK_PROTEIN
            msg.body(
                f"Prote√≠na para Combo {session['data']['current_combo']}:\n" +
                "\n".join(
                    f"{num_emoji(k)} {v[0]}{' +$%.2f' % v[1] if v[1] else ''}"
                    for k, v in PROTEIN_OPTIONS.items()
                )
            )
        else:
            msg.body("Elige 1, 2 o 3.")

    # 8) Prote√≠na
    elif state == STATE_ASK_PROTEIN:
        if incoming in PROTEIN_OPTIONS:
            session['data']['combos'][-1]['protein'] = incoming
            session['state'] = STATE_ASK_BEVERAGE
            msg.body(
                f"Bebida para Combo {session['data']['current_combo']}:\n" +
                "\n".join(
                    f"{num_emoji(k)} {v}"
                    for k, v in BEVERAGE_OPTIONS.items()
                )
            )
        else:
            msg.body("Elige 1‚Äì4.")

    # 9) Bebida
    elif state == STATE_ASK_BEVERAGE:
        if incoming in BEVERAGE_OPTIONS:
            session['data']['combos'][-1]['beverage'] = incoming
            session['state'] = STATE_ASK_EXTRA
            msg.body(
                f"Extra para Combo {session['data']['current_combo']}:\n" +
                "\n".join(
                    f"{num_emoji(k)} {v[0]} ‚Äî ${v[1]:.2f}"
                    for k, v in EXTRA_OPTIONS.items()
                )
            )
        else:
            msg.body("Elige 1‚Äì8.")

    # 10) Extra ‚Üí resumen y siguiente combo / terminar
    elif state == STATE_ASK_EXTRA:
        if incoming in EXTRA_OPTIONS:
            session['data']['combos'][-1]['extra'] = incoming
            d = session['data']
            idx = d['current_combo']
            total = d['combos_total']
            combo = d['combos'][-1]
            # datos del combo
            cn, _ = COMBO_OPTIONS[combo['combo']]
            pn, _ = PROTEIN_OPTIONS[combo['protein']]
            bv     = BEVERAGE_OPTIONS[combo['beverage']]
            en, _ = EXTRA_OPTIONS[combo['extra']]

            # responder resumen de este combo
            msg.body(
                f"üßæ *Combo {idx}: {cn}*\n"
                f"‚Ä¢ Prote√≠na: {pn}\n"
                f"‚Ä¢ Bebida: {bv}\n"
                f"‚Ä¢ Extra: {en}"
            )

            # ¬øHay otro combo?
            if idx < total:
                d['current_combo'] += 1
                session['state'] = STATE_ASK_COMBO_TYPE
                msg.body(
                    f"üëç ¬°Vamos con el siguiente!\n\n"
                    + "\n".join(
                        f"{num_emoji(k)} {v[0]} ‚Äî ${v[1]:.2f}"
                        for k, v in COMBO_OPTIONS.items()
                    )
                )
            else:
                # √∫ltimo combo ‚Üí finalizar pedido
                name    = d['name']
                address = d['address']
                phone   = sender.split("whatsapp:")[1]
                # generar ID
                idp = f"{name[:3].upper()}{phone[-4:]}{datetime.now().strftime('%d%m%y')}"
                # calcular total y resumen completo
                amount = 0
                lines  = []
                for i, c in enumerate(d['combos'], 1):
                    cn, cp = COMBO_OPTIONS[c['combo']]
                    pn, pp = PROTEIN_OPTIONS[c['protein']]
                    bv     = BEVERAGE_OPTIONS[c['beverage']]
                    en, ep = EXTRA_OPTIONS[c['extra']]
                    amount += cp + pp + ep
                    lines.append(f"‚Ä¢ Combo {i}: {cn} | Prot: {pn} | Beb: {bv} | Extra: {en}")
                resumen = "\n".join(lines)
                # enviar a tienda
                client.messages.create(
                    from_=SANDBOX_NUMBER,
                    to=STORE_NUMBER,
                    body=(
                        f"üõí *Nuevo pedido*\n"
                        f"ID: `{idp}`\n"
                        f"Cliente: {name}\n"
                        f"Direcci√≥n: {address}\n\n"
                        f"{resumen}\n\n"
                        f"üí∞ Total: ${amount:.2f}\n"
                        f"üìû Contacto: +{phone}"
                    )
                )
                # confirmar al cliente
                msg.body(
                    f"‚úÖ Pedido completo (ID: {idp})\n"
                    f"{resumen}\n"
                    f"üí∞ Total: ${amount:.2f}\n"
                    "En breve un humano confirmar√° el env√≠o."
                )
                # guardar activo si lo necesitas
                pedidos_activos[sender] = {'id': idp, 'nombre': name, 'estado': 1}
                session = None

        else:
            msg.body("Elige un extra v√°lido (1‚Äì12).")

    # PROMOS
    elif state == 'promos_optin':
        if incoming == '1':
            msg.body("¬°√önete aqu√≠! https://chat.whatsapp.com/KmgrQT4Fan0DG7wClcSwfP")
        else:
            msg.body("OK, si cambias av√≠same.")
        session = None

    else:
        msg.body("Algo fall√≥. Reiniciemos.")
        session = None

    # Guardar o borrar sesi√≥n
    if session:
        sessions[sender] = session
    else:
        sessions.pop(sender, None)

    return str(resp)

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 3000)))
